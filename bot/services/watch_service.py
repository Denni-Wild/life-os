"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ
"""

import os
import time
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from pathlib import Path
import asyncio

logger = logging.getLogger(__name__)


class WatchService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
    
    def __init__(self, memory_path: str = "memory"):
        self.memory_path = Path(memory_path)
        self.last_check = datetime.now()
        self.file_timestamps = {}
    
    def get_current_time_info(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏"""
        now = datetime.now()
        
        days = [
            "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞",
            "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞"
        ]
        
        return {
            "day": days[now.weekday()],
            "date": now.strftime("%d.%m.%Y"),
            "time": now.strftime("%H:%M:%S"),
            "week": f"–ù–µ–¥–µ–ª—è {now.isocalendar()[1]}",
            "month": now.strftime("%B"),
            "year": str(now.year),
            "timestamp": now.isoformat()
        }
    
    def format_time_info(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        info = self.get_current_time_info()
        
        return f"""
üïê *–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:*
üìÖ –î–µ–Ω—å: {info['day']}
üìÜ –î–∞—Ç–∞: {info['date']}
‚è∞ –í—Ä–µ–º—è: {info['time']}
üìä –ù–µ–¥–µ–ª—è: {info['week']}
üóìÔ∏è –ú–µ—Å—è—Ü: {info['month']} {info['year']}
        """.strip()
    
    def get_file_timestamp(self, file_path: Path) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É —Ñ–∞–π–ª–∞"""
        try:
            return file_path.stat().st_mtime
        except (OSError, FileNotFoundError):
            return 0
    
    def scan_memory_files(self) -> Dict[str, float]:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã –≤ –ø–∞–º—è—Ç–∏ –∏ –ø–æ–ª—É—á–∏—Ç—å –∏—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏"""
        timestamps = {}
        
        if not self.memory_path.exists():
            logger.warning(f"–ü—É—Ç—å –∫ –ø–∞–º—è—Ç–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {self.memory_path}")
            return timestamps
        
        # –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–º—è—Ç–∏
        for file_path in self.memory_path.rglob("*"):
            if file_path.is_file() and not file_path.name.startswith('.'):
                relative_path = str(file_path.relative_to(self.memory_path))
                timestamps[relative_path] = self.get_file_timestamp(file_path)
        
        return timestamps
    
    def get_changed_files(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        current_timestamps = self.scan_memory_files()
        changed_files = []
        
        for file_path, timestamp in current_timestamps.items():
            if file_path not in self.file_timestamps:
                # –ù–æ–≤—ã–π —Ñ–∞–π–ª
                changed_files.append(f"‚ûï {file_path}")
            elif self.file_timestamps[file_path] != timestamp:
                # –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                changed_files.append(f"‚úèÔ∏è {file_path}")
        
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for file_path in self.file_timestamps:
            if file_path not in current_timestamps:
                changed_files.append(f"üóëÔ∏è {file_path}")
        
        # –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
        self.file_timestamps = current_timestamps
        self.last_check = datetime.now()
        
        return changed_files
    
    def get_memory_stats(self) -> Dict[str, int]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–º—è—Ç–∏"""
        if not self.memory_path.exists():
            return {"files": 0, "directories": 0, "total_size": 0}
        
        file_count = 0
        dir_count = 0
        total_size = 0
        
        for item in self.memory_path.rglob("*"):
            if item.is_file() and not item.name.startswith('.'):
                file_count += 1
                try:
                    total_size += item.stat().st_size
                except OSError:
                    pass
            elif item.is_dir() and not item.name.startswith('.'):
                dir_count += 1
        
        return {
            "files": file_count,
            "directories": dir_count,
            "total_size": total_size
        }
    
    def format_memory_stats(self) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–º—è—Ç–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        stats = self.get_memory_stats()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        size_mb = stats["total_size"] / (1024 * 1024)
        
        return f"""
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏:*
üìÅ –§–∞–π–ª–æ–≤: {stats['files']}
üìÇ –ü–∞–ø–æ–∫: {stats['directories']}
üíæ –†–∞–∑–º–µ—Ä: {size_mb:.2f} –ú–ë
üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {self.last_check.strftime('%H:%M:%S')}
        """.strip()
    
    def get_system_status(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        time_info = self.format_time_info()
        memory_stats = self.format_memory_stats()
        changed_files = self.get_changed_files()
        
        status = f"{time_info}\n\n{memory_stats}"
        
        if changed_files:
            status += "\n\nüìù *–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:*\n"
            for file_change in changed_files[:10]:  # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
                status += f"‚Ä¢ {file_change}\n"
            
            if len(changed_files) > 10:
                status += f"‚Ä¢ ... –∏ –µ—â–µ {len(changed_files) - 10} –∏–∑–º–µ–Ω–µ–Ω–∏–π\n"
        
        return status
    
    async def monitor_changes(self, interval: int = 60) -> None:
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        logger.info(f"–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {interval} —Å–µ–∫—É–Ω–¥")
        
        while True:
            try:
                changed_files = self.get_changed_files()
                
                if changed_files:
                    logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è: {len(changed_files)} —Ñ–∞–π–ª–æ–≤")
                    for change in changed_files:
                        logger.info(f"  {change}")
                
                await asyncio.sleep(interval)
                
            except KeyboardInterrupt:
                logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                await asyncio.sleep(interval)


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    watch_service = WatchService()
    
    print("üïê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏:")
    print(watch_service.format_time_info())
    
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏:")
    print(watch_service.format_memory_stats())
    
    print("\nüìù –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤:")
    changed_files = watch_service.get_changed_files()
    if changed_files:
        for change in changed_files:
            print(f"  {change}")
    else:
        print("  –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
    
    print("\nüîÑ –ü–æ–ª–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:")
    print(watch_service.get_system_status())


if __name__ == "__main__":
    asyncio.run(main()) 