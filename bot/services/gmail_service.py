"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Gmail API
"""

import os
import json
import logging
from typing import List, Dict, Optional
from datetime import datetime
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

logger = logging.getLogger(__name__)

# Gmail API scopes
SCOPES = ['https://www.googleapis.com/auth/gmail.readonly']

# Paths for credentials
TOKEN_PATH = os.path.join(os.path.dirname(__file__), '..', '..', 'scripts', 'token.json')
CREDENTIALS_PATH = os.path.join(os.path.dirname(__file__), '..', '..', 'scripts', 'credentials.json')


class GmailService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Gmail API"""
    
    def __init__(self):
        self.service = None
        self.creds = None
    
    def _load_saved_credentials(self) -> Optional[Credentials]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        try:
            if os.path.exists(TOKEN_PATH):
                with open(TOKEN_PATH, 'r') as token:
                    creds = Credentials.from_authorized_user_info(
                        json.load(token), SCOPES
                    )
                return creds
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return None
    
    def _save_credentials(self, creds: Credentials) -> None:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        try:
            with open(TOKEN_PATH, 'w') as token:
                token.write(creds.to_json())
            logger.info("–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
    
    def _authorize(self) -> Credentials:
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Gmail API"""
        creds = self._load_saved_credentials()
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∏—Ö
        if not creds or not creds.valid:
            if creds and creds.expired and creds.refresh_token:
                try:
                    creds.refresh(Request())
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
                    creds = None
            
            if not creds:
                if not os.path.exists(CREDENTIALS_PATH):
                    raise FileNotFoundError(
                        f"–§–∞–π–ª credentials.json –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {CREDENTIALS_PATH}\n"
                        "–°–∫–∞—á–∞–π—Ç–µ –µ–≥–æ –∏–∑ Google Cloud Console"
                    )
                
                flow = InstalledAppFlow.from_client_secrets_file(
                    CREDENTIALS_PATH, SCOPES
                )
                creds = flow.run_local_server(port=0)
            
            self._save_credentials(creds)
        
        return creds
    
    async def connect(self) -> None:
        """–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Gmail API"""
        try:
            self.creds = self._authorize()
            self.service = build('gmail', 'v1', credentials=self.creds)
            logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Gmail API —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Gmail API: {e}")
            raise
    
    async def list_messages(self, max_results: int = 100) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not self.service:
            await self.connect()
        
        try:
            response = self.service.users().messages().list(
                userId='me',
                maxResults=max_results
            ).execute()
            
            messages = response.get('messages', [])
            if not messages:
                logger.info("–°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return []
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            return messages
            
        except HttpError as error:
            logger.error(f"–û—à–∏–±–∫–∞ Gmail API: {error}")
            return []
    
    async def get_message_details(self, message_id: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not self.service:
            await self.connect()
        
        try:
            message = self.service.users().messages().get(
                userId='me',
                id=message_id
            ).execute()
            
            # –ò–∑–≤–ª–µ—á—å –∑–∞–≥–æ–ª–æ–≤–∫–∏
            headers = message.get('payload', {}).get('headers', [])
            subject = next((h['value'] for h in headers if h['name'].lower() == 'subject'), '')
            sender = next((h['value'] for h in headers if h['name'].lower() == 'from'), '')
            date = next((h['value'] for h in headers if h['name'].lower() == 'date'), '')
            
            return {
                'id': message_id,
                'subject': subject,
                'from': sender,
                'date': date,
                'snippet': message.get('snippet', ''),
                'thread_id': message.get('threadId', '')
            }
            
        except HttpError as error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {error}")
            return None
    
    async def get_recent_messages(self, max_results: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–µ—Ç–∞–ª—è–º–∏"""
        messages = await self.list_messages(max_results)
        detailed_messages = []
        
        for message in messages:
            details = await self.get_message_details(message['id'])
            if details:
                detailed_messages.append(details)
        
        return detailed_messages
    
    async def search_messages(self, query: str, max_results: int = 50) -> List[Dict]:
        """–ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
        if not self.service:
            await self.connect()
        
        try:
            response = self.service.users().messages().list(
                userId='me',
                q=query,
                maxResults=max_results
            ).execute()
            
            messages = response.get('messages', [])
            detailed_messages = []
            
            for message in messages:
                details = await self.get_message_details(message['id'])
                if details:
                    detailed_messages.append(details)
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(detailed_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}")
            return detailed_messages
            
        except HttpError as error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {error}")
            return []
    
    def format_message_for_display(self, message: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        return f"""
üìß *{message.get('subject', '–ë–µ–∑ —Ç–µ–º—ã')}*
üë§ –û—Ç: {message.get('from', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
üìÖ –î–∞—Ç–∞: {message.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
üìù {message.get('snippet', '–ù–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞')}
        """.strip()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    gmail_service = GmailService()
    
    try:
        print("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
        messages = await gmail_service.get_recent_messages(5)
        
        if messages:
            print(f"\nüìß –ù–∞–π–¥–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π:\n")
            for i, message in enumerate(messages, 1):
                print(f"{i}. {gmail_service.format_message_for_display(message)}")
                print("-" * 50)
        else:
            print("–°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    import asyncio
    asyncio.run(main()) 