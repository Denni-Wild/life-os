"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏
"""

import logging
from datetime import datetime
from typing import List

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from ..services.todoist_service import TodoistService
from ..services.memory_service import MemoryService
from ..config import Config

logger = logging.getLogger(__name__)


async def capture_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /capture"""
    if not context.args:
        await update.message.reply_text(
            "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /capture <—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏>\n\n"
            "–ü—Ä–∏–º–µ—Ä: /capture –ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ –∑–∞–≤—Ç—Ä–∞"
        )
        return
    
    content = " ".join(context.args)
    chat_id = update.effective_chat.id
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —Å–µ—Ä–≤–∏—Å–æ–≤
        config = Config()
        memory_service = MemoryService()
        todoist_service = TodoistService(config) if config.todoist_api_token else None
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É
        await memory_service.save_task(content)
        
        # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω Todoist, —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —Ç–∞–º
        if todoist_service:
            await todoist_service.create_task(content)
        
        await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞—Ö–≤–∞—á–µ–Ω–∞: \"{content}\"")
        logger.info(f"–ó–∞–¥–∞—á–∞ –∑–∞—Ö–≤–∞—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}: {content}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—Ö–≤–∞—Ç–µ –∑–∞–¥–∞—á–∏: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—Ö–≤–∞—Ç–µ –∑–∞–¥–∞—á–∏")


async def tasks_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tasks"""
    chat_id = update.effective_chat.id
    
    try:
        config = Config()
        todoist_service = TodoistService(config) if config.todoist_api_token else None
        
        if todoist_service:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ Todoist
            tasks = await todoist_service.get_today_tasks()
            
            if not tasks:
                await update.message.reply_text("üìã –ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á –Ω–µ—Ç. –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üéâ")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
            task_list = []
            for i, task in enumerate(tasks, 1):
                priority_emoji = ['üîµ', 'üü¢', 'üü°', 'üî¥'][task.priority - 1] if task.priority <= 4 else '‚ö™'
                due_date = f" ({task.due.date})" if task.due else ""
                labels = f" [{', '.join(task.labels)}]" if task.labels else ""
                
                task_text = f"{i}. {priority_emoji} {task.content}{due_date}{labels}"
                task_list.append(task_text)
            
            tasks_text = "\n".join(task_list)
            message = f"üìã *–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*\n\n{tasks_text}"
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á
            keyboard = []
            for i, task in enumerate(tasks[:5], 1):  # –ú–∞–∫—Å–∏–º—É–º 5 –∫–Ω–æ–ø–æ–∫
                keyboard.append([
                    InlineKeyboardButton(
                        f"‚úÖ {i}. {task.content[:20]}...",
                        callback_data=f"complete_task:{task.id}"
                    )
                ])
            
            reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
            
            await update.message.reply_text(message, parse_mode='Markdown', reply_markup=reply_markup)
            
        else:
            # –õ–æ–∫–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏
            memory_service = MemoryService()
            tasks = await memory_service.get_today_tasks()
            
            if not tasks:
                await update.message.reply_text("üìã –ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á –Ω–µ—Ç. –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üéâ")
                return
            
            task_list = []
            for i, task in enumerate(tasks, 1):
                task_list.append(f"{i}. {task['content']}")
            
            tasks_text = "\n".join(task_list)
            message = f"üìã *–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*\n\n{tasks_text}"
            
            await update.message.reply_text(message, parse_mode='Markdown')
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á")


async def status_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
    try:
        memory_service = MemoryService()
        areas = await memory_service.get_life_areas_status()
        
        if not areas:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏
            areas = [
                {"name": "–ó–¥–æ—Ä–æ–≤—å–µ", "score": 7},
                {"name": "–ö–∞—Ä—å–µ—Ä–∞", "score": 8},
                {"name": "–û—Ç–Ω–æ—à–µ–Ω–∏—è", "score": 9},
                {"name": "–§–∏–Ω–∞–Ω—Å—ã", "score": 6},
                {"name": "–õ–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç", "score": 8}
            ]
        
        status_lines = []
        for area in areas:
            score = area.get('score', 0)
            stars = "‚≠ê" * score
            status_lines.append(f"{area['name']}: {stars} ({score}/10)")
        
        status_text = "\n".join(status_lines)
        message = f"üìä *–°—Ç–∞—Ç—É—Å –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π:*\n\n{status_text}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—Ü–µ–Ω–∫–∏
        keyboard = []
        for area in areas[:3]:  # –ú–∞–∫—Å–∏–º—É–º 3 –æ–±–ª–∞—Å—Ç–∏
            row = []
            for score in range(1, 6):  # –ö–Ω–æ–ø–∫–∏ 1-5
                row.append(InlineKeyboardButton(
                    str(score),
                    callback_data=f"area_score:{area['name']}:{score}"
                ))
            keyboard.append(row)
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            message, 
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç—É—Å –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞") 