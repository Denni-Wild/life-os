"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
"""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from ..services.memory_service import MemoryService

logger = logging.getLogger(__name__)


async def mood_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /mood - –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if context.args:
        try:
            score = int(context.args[0])
            if 1 <= score <= 10:
                await _save_mood(score, update, context)
                return
            else:
                await update.message.reply_text("‚ùå –û—Ü–µ–Ω–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10")
                return
        except ValueError:
            await update.message.reply_text("‚ùå –û—Ü–µ–Ω–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 10")
            return
    
    # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
    mood_message = """
üòä *–ó–∞–ø–∏—Å–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ*

–ö–∞–∫ –≤—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–≥–æ–¥–Ω—è?

–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 10:
1-2: –û—á–µ–Ω—å –ø–ª–æ—Ö–æ üò¢
3-4: –ü–ª–æ—Ö–æ üòî
5-6: –ù–æ—Ä–º–∞–ª—å–Ω–æ üòê
7-8: –•–æ—Ä–æ—à–æ üòä
9-10: –û—Ç–ª–∏—á–Ω–æ üòç
    """
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    keyboard = []
    for i in range(1, 11):
        emoji = _get_mood_emoji(i)
        keyboard.append(InlineKeyboardButton(f"{emoji} {i}", callback_data=f"mood_score:{i}"))
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Ä—è–¥—ã –ø–æ 5 –∫–Ω–æ–ø–æ–∫
    rows = [keyboard[i:i+5] for i in range(0, len(keyboard), 5)]
    reply_markup = InlineKeyboardMarkup(rows)
    
    await update.message.reply_text(
        mood_message,
        parse_mode='Markdown',
        reply_markup=reply_markup
    )
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è")


async def habits_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /habits - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–µ–∫"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if context.args:
        habit = " ".join(context.args)
        await _save_habit(habit, update, context)
        return
    
    # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏
    habits_message = """
‚úÖ *–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–µ–∫*

–û—Ç–º–µ—Ç—å—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é:

*–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏:*
    """
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø—Ä–∏–≤—ã—á–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    habit_categories = {
        "üèÉ‚Äç‚ôÇÔ∏è –ó–¥–æ—Ä–æ–≤—å–µ": [
            "exercise", "meditation", "drinking_water", "sleep_early", 
            "healthy_eating", "walking", "stretching", "vitamins"
        ],
        "üìö –†–∞–∑–≤–∏—Ç–∏–µ": [
            "reading", "journaling", "learning", "practice_skills", 
            "planning", "goal_review"
        ],
        "üíº –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": [
            "morning_routine", "evening_routine", "time_tracking", 
            "task_prioritization", "break_taking"
        ],
        "üßò‚Äç‚ôÄÔ∏è –ú–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ": [
            "gratitude", "mindfulness", "social_connection", "hobby_time"
        ]
    }
    
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤—ã—á–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    for category, habits in habit_categories.items():
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        keyboard.append([InlineKeyboardButton(category, callback_data="habit_category_header")])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤—ã—á–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for habit in habits:
            habit_name = habit.replace("_", " ").title()
            keyboard.append([InlineKeyboardButton(
                f"‚úÖ {habit_name}", 
                callback_data=f"habit_complete:{habit}"
            )])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –º–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        keyboard.append([])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard.append([
        InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é", callback_data="add_custom_habit"),
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="habits_stats")
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        habits_message,
        parse_mode='Markdown',
        reply_markup=reply_markup
    )
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–µ–∫")


async def _save_mood(score: int, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"""
    try:
        memory_service = MemoryService()
        await memory_service.save_mood(score)
        
        emoji = _get_mood_emoji(score)
        await update.message.reply_text(f"{emoji} –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ: {score}/10")
        
        logger.info(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ {score}/10 —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è")


async def _save_habit(habit: str, update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É"""
    try:
        memory_service = MemoryService()
        await memory_service.save_habit(habit)
        
        await update.message.reply_text(f"‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞: {habit}")
        
        logger.info(f"–ü—Ä–∏–≤—ã—á–∫–∞ '{habit}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –ø—Ä–∏–≤—ã—á–∫–∏")


def _get_mood_emoji(score: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"""
    if score >= 9:
        return "üòç"
    elif score >= 7:
        return "üòä"
    elif score >= 5:
        return "üòê"
    elif score >= 3:
        return "üòî"
    else:
        return "üò¢" 