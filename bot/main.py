#!/usr/bin/env python3
"""
Life OS Telegram Bot
–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω—å—é —á–µ—Ä–µ–∑ Telegram
"""

import asyncio
import logging
import os
import time
import socket
from datetime import datetime, timedelta
from typing import Dict, List, Optional

from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters, ConversationHandler
)

from .config import Config, load_config
from .handlers import (
    start_handler, help_handler, capture_handler, tasks_handler,
    status_handler, review_handler, assess_handler, schedule_handler,
    mood_handler, habits_handler, unknown_handler
)
from .services.todoist_service import TodoistService
from .services.memory_service import MemoryService
from .utils.logger import setup_logging

# Load environment variables
load_dotenv()

# Setup logging
setup_logging()
logger = logging.getLogger(__name__)

# Conversation states
CHOOSING, TYPING_REASON = range(2)

class LifeOSBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ Life OS"""
    
    def __init__(self):
        self.config = load_config()
        self.todoist_service = TodoistService(self.config)
        self.memory_service = MemoryService()
        self.application = None
        
    async def post_init(self, app: Application) -> None:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        commands = [
            BotCommand("start", "üöÄ –ó–∞–ø—É—Å–∫ Life OS Bot"),
            BotCommand("help", "‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
            BotCommand("capture", "üìù –ë—ã—Å—Ç—Ä—ã–π –∑–∞—Ö–≤–∞—Ç –∑–∞–¥–∞—á–∏ –∏–ª–∏ –∏–¥–µ–∏"),
            BotCommand("tasks", "üìã –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"),
            BotCommand("status", "üìä –°—Ç–∞—Ç—É—Å –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π"),
            BotCommand("review", "üîç –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ–±–∑–æ—Ä"),
            BotCommand("assess", "üìà –û—Ü–µ–Ω–∫–∞ –∂–∏–∑–Ω–∏"),
            BotCommand("schedule", "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"),
            BotCommand("mood", "üòä –ó–∞–ø–∏—Å–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"),
            BotCommand("habits", "‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–µ–∫"),
        ]
        await app.bot.set_my_commands(commands)
        logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –∑–∞–ø—É—Å–∫–µ
        await self.send_admin_startup_notification()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", start_handler))
        self.application.add_handler(CommandHandler("help", help_handler))
        self.application.add_handler(CommandHandler("capture", capture_handler))
        self.application.add_handler(CommandHandler("tasks", tasks_handler))
        self.application.add_handler(CommandHandler("status", status_handler))
        self.application.add_handler(CommandHandler("review", review_handler))
        self.application.add_handler(CommandHandler("assess", assess_handler))
        self.application.add_handler(CommandHandler("schedule", schedule_handler))
        self.application.add_handler(CommandHandler("mood", mood_handler))
        self.application.add_handler(CommandHandler("habits", habits_handler))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–Ω–æ–ø–∫–∏)
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞
        self.application.add_handler(
            MessageHandler(
                filters.TEXT & ~filters.COMMAND, 
                self.handle_text_message
            )
        )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        self.application.add_handler(
            MessageHandler(filters.COMMAND, unknown_handler)
        )
        
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    def _can_resolve_api(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ api.telegram.org —Ä–µ–∑–æ–ª–≤–∏—Ç—Å—è"""
        try:
            socket.getaddrinfo("api.telegram.org", 443)
            return True
        except Exception as e:
            logger.warning(f"DNS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return False
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            query = update.callback_query
            await query.answer()
            data = query.data
            
            if data.startswith("capture_task:"):
                content = data.split(":", 1)[1]
                await self.capture_task(content, update.effective_chat.id)
                await query.edit_message_text("‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞—Ö–≤–∞—á–µ–Ω–∞")
            elif data.startswith("capture_idea:"):
                content = data.split(":", 1)[1]
                await self.capture_idea(content, update.effective_chat.id)
                await query.edit_message_text("üí° –ò–¥–µ—è –∑–∞—Ö–≤–∞—á–µ–Ω–∞")
            elif data.startswith("area_score:"):
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
                parts = data.split(":")
                if len(parts) == 3:
                    area = parts[1]
                    score = int(parts[2])
                    await self.update_life_area_score(area, score, update.effective_chat.id)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
                    await query.edit_message_text(
                        f"‚úÖ –û—Ü–µ–Ω–∫–∞ –æ–±–ª–∞—Å—Ç–∏ '{area}' –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {score}/10\n\n"
                        f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –æ–±–ª–∞—Å—Ç–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –æ—Ü–µ–Ω–æ–∫."
                    )
                else:
                    await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –æ—Ü–µ–Ω–∫–∏")
            elif data.startswith("area_info:"):
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –æ–±–ª–∞—Å—Ç—å –∂–∏–∑–Ω–∏
                area = data.split(":", 1)[1]
                context.user_data['selected_area'] = area
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
                await query.edit_message_text(
                    f"üéØ –í—ã–±—Ä–∞–Ω–∞ –æ–±–ª–∞—Å—Ç—å: *{area}*\n\n"
                    f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 10:",
                    parse_mode='Markdown',
                    reply_markup=query.message.reply_markup
                )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                await query.answer(f"–í—ã–±—Ä–∞–Ω–∞ –æ–±–ª–∞—Å—Ç—å: {area}")
            elif data.startswith("score_select:"):
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –æ—Ü–µ–Ω–∫—É
                if 'selected_area' not in context.user_data:
                    await query.edit_message_text(
                        "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å –∂–∏–∑–Ω–∏!\n\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /assess –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ü–µ–Ω–∫–∏."
                    )
                    return
                
                score = int(data.split(":", 1)[1])
                area = context.user_data['selected_area']
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É
                await self.update_life_area_score(area, score, update.effective_chat.id)
                
                # –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ–±–ª–∞—Å—Ç—å
                del context.user_data['selected_area']
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                await query.answer(f"–û—Ü–µ–Ω–∫–∞ {area}: {score}/10 —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
                await query.edit_message_text(
                    f"‚úÖ –û—Ü–µ–Ω–∫–∞ –æ–±–ª–∞—Å—Ç–∏ '{area}' –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {score}/10\n\n"
                    f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –æ–±–ª–∞—Å—Ç–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –æ—Ü–µ–Ω–æ–∫.",
                    reply_markup=query.message.reply_markup
                )
            elif data == "show_current_scores":
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –æ—Ü–µ–Ω–∫–∏
                try:
                    scores = await self.memory_service.get_life_area_scores()
                    if scores:
                        scores_text = "üìä *–¢–µ–∫—É—â–∏–µ –æ—Ü–µ–Ω–∫–∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π:*\n\n"
                        for area, score in scores.items():
                            scores_text += f"‚Ä¢ {area}: {score}/10\n"
                    else:
                        scores_text = "üìä –ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫.\n\n–ù–∞—á–Ω–∏—Ç–µ –æ—Ü–µ–Ω–∫—É —Å –ø–æ–º–æ—â—å—é /assess"
                    
                    await query.edit_message_text(
                        scores_text,
                        parse_mode='Markdown',
                        reply_markup=query.message.reply_markup
                    )
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    await query.answer("–¢–µ–∫—É—â–∏–µ –æ—Ü–µ–Ω–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ü–µ–Ω–æ–∫: {e}")
                    await query.edit_message_text(
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ü–µ–Ω–æ–∫",
                        reply_markup=query.message.reply_markup
                    )
            elif data.startswith("habit_complete:"):
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ—Ç–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏
                habit = data.split(":", 1)[1]
                await self.memory_service.save_habit(habit)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                await query.answer(f"‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ '{habit}' –æ—Ç–º–µ—á–µ–Ω–∞!")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
                await query.edit_message_text(
                    f"‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ *{habit.replace('_', ' ').title()}* –æ—Ç–º–µ—á–µ–Ω–∞!\n\n"
                    f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ—Ç–º–µ—á–∞—Ç—å –¥—Ä—É–≥–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /habits –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.",
                    parse_mode='Markdown'
                )
                
                logger.info(f"–ü—Ä–∏–≤—ã—á–∫–∞ '{habit}' –æ—Ç–º–µ—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
            elif data == "add_custom_habit":
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é –ø—Ä–∏–≤—ã—á–∫—É
                await query.edit_message_text(
                    "‚úçÔ∏è *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏*\n\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –ø—Ä–∏–≤—ã—á–∫–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                    "‚Ä¢ –ü–∏—Ç—å –≤–æ–¥—É\n"
                    "‚Ä¢ –î–µ–ª–∞—Ç—å –∑–∞—Ä—è–¥–∫—É\n"
                    "‚Ä¢ –ß–∏—Ç–∞—Ç—å –∫–Ω–∏–≥–∏\n\n"
                    "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /habits –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫.",
                    parse_mode='Markdown'
                )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                await query.answer("–û–∂–∏–¥–∞—é –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏...")
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏
                context.user_data['waiting_for_habit'] = True
            elif data == "habit_category_header":
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏–≤—ã—á–µ–∫ (–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞)
                await query.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–∏–≤—ã—á–µ–∫")
            elif data == "habits_stats":
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏–≤—ã—á–µ–∫
                try:
                    habits = await self.memory_service.get_habits_stats()
                    if habits:
                        stats_text = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–≤—ã—á–µ–∫:*\n\n"
                        for habit, count in habits.items():
                            stats_text += f"‚Ä¢ {habit.replace('_', ' ').title()}: {count} —Ä–∞–∑\n"
                    else:
                        stats_text = "üìä –ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫.\n\n–ù–∞—á–Ω–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏!"
                    
                    await query.edit_message_text(
                        stats_text,
                        parse_mode='Markdown',
                        reply_markup=query.message.reply_markup
                    )
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    await query.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏–≤—ã—á–µ–∫: {e}")
                    await query.edit_message_text(
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏–≤—ã—á–µ–∫",
                        reply_markup=query.message.reply_markup
                    )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
    
    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞"""
        text = update.message.text
        chat_id = update.effective_chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –≤–≤–æ–¥ –ø—Ä–∏–≤—ã—á–∫–∏
        if context.user_data.get('waiting_for_habit'):
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–∏–≤—ã—á–∫–∏
            await self.memory_service.save_habit(text)
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
            del context.user_data['waiting_for_habit']
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await update.message.reply_text(
                f"‚úÖ –ù–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞ *{text}* –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ –æ—Ç–º–µ—á–µ–Ω–∞!\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /habits –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –ø—Ä–∏–≤—ã—á–µ–∫.",
                parse_mode='Markdown'
            )
            
            logger.info(f"–ù–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞ '{text}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {update.effective_user.id}")
            return
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–µ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞—Ö–≤–∞—Ç–∏—Ç—å
        if len(text) < 100:
            keyboard = [
                [
                    InlineKeyboardButton("üìù –ó–∞—Ö–≤–∞—Ç–∏—Ç—å –∫–∞–∫ –∑–∞–¥–∞—á—É", 
                                       callback_data=f"capture_task:{text}"),
                    InlineKeyboardButton("üí° –ó–∞—Ö–≤–∞—Ç–∏—Ç—å –∫–∞–∫ –∏–¥–µ—é", 
                                       callback_data=f"capture_idea:{text}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "üí≠ –•–æ—Ç–∏—Ç–µ –∑–∞—Ö–≤–∞—Ç–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?",
                reply_markup=reply_markup
            )
    
    async def capture_task(self, content: str, chat_id: int):
        """–ó–∞—Ö–≤–∞—Ç –∑–∞–¥–∞—á–∏"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
            await self.memory_service.save_task(content)
            
            # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω Todoist, —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —Ç–∞–º
            if self.config.todoist_api_token:
                await self.todoist_service.create_task(content)
                
            logger.info(f"–ó–∞–¥–∞—á–∞ –∑–∞—Ö–≤–∞—á–µ–Ω–∞: {content}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—Ö–≤–∞—Ç–µ –∑–∞–¥–∞—á–∏: {e}")
            raise
    
    async def capture_idea(self, content: str, chat_id: int):
        """–ó–∞—Ö–≤–∞—Ç –∏–¥–µ–∏"""
        try:
            await self.memory_service.save_idea(content)
            logger.info(f"–ò–¥–µ—è –∑–∞—Ö–≤–∞—á–µ–Ω–∞: {content}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—Ö–≤–∞—Ç–µ –∏–¥–µ–∏: {e}")
            raise
    
    async def update_life_area_score(self, area: str, score: int, chat_id: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏"""
        try:
            await self.memory_service.save_life_area_score(area, score)
            logger.info(f"–û—Ü–µ–Ω–∫–∞ –æ–±–ª–∞—Å—Ç–∏ '{area}' –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {score}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏: {e}")
            raise
    
    async def complete_task(self, task_id: str, chat_id: int):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        try:
            if self.config.todoist_api_token:
                await self.todoist_service.complete_task(task_id)
            await self.memory_service.complete_task(task_id)
            logger.info(f"–ó–∞–¥–∞—á–∞ {task_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
            raise
    
    async def send_admin_startup_notification(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
        if not self.config.admin_user_id:
            logger.warning("Admin user ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return
            
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
            import platform
            import psutil
            
            system_info = f"üñ•Ô∏è {platform.system()} {platform.release()}"
            python_version = f"üêç Python {platform.python_version()}"
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏
            memory = psutil.virtual_memory()
            memory_info = f"üíæ RAM: {memory.used // (1024**3)}GB/{memory.total // (1024**3)}GB"
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            message = f"""
üöÄ **Life OS Bot –∑–∞–ø—É—â–µ–Ω!**

‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {current_time}
{system_info}
{python_version}
{memory_info}

‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!
            """.strip()
            
            await self.application.bot.send_message(
                chat_id=self.config.admin_user_id,
                text=message,
                parse_mode='Markdown'
            )
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {self.config.admin_user_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")

    def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π, —Å —Ä–µ—Ç—Ä–∞—è–º–∏ –ø—Ä–∏ —Å–µ—Ç–µ–≤—ã—Ö —Å–±–æ—è—Ö)"""
        backoff_seconds = 5
        max_backoff = 300
        while True:
            try:
                if not self._can_resolve_api():
                    logger.warning(f"api.telegram.org –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {backoff_seconds} —Å–µ–∫")
                    time.sleep(backoff_seconds)
                    backoff_seconds = min(backoff_seconds * 2, max_backoff)
                    continue
                
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                self.application = Application.builder().token(self.config.telegram_token).build()
                
                # post_init –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥
                self.application.post_init = self.post_init
                
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
                self.setup_handlers()
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ (–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤)
                logger.info("ü§ñ Life OS Bot –∑–∞–ø—É—â–µ–Ω...")
                self.application.run_polling(allowed_updates=Update.ALL_TYPES)
                
                # –ï—Å–ª–∏ run_polling –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º), –≤—ã—Ö–æ–¥–∏–º
                logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                break
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
                logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {backoff_seconds} —Å–µ–∫...")
                time.sleep(backoff_seconds)
                backoff_seconds = min(backoff_seconds * 2, max_backoff)
                continue


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è)"""
    bot = LifeOSBot()
    bot.start() 