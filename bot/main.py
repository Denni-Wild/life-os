#!/usr/bin/env python3
"""
Life OS Telegram Bot
–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω—å—é —á–µ—Ä–µ–∑ Telegram
"""

import asyncio
import logging
import os
import time
import socket
from datetime import datetime, timedelta
from typing import Dict, List, Optional

from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters, ConversationHandler
)

from .config import Config, load_config
from .handlers import (
    start_handler, help_handler, capture_handler, tasks_handler,
    status_handler, review_handler, assess_handler, schedule_handler,
    mood_handler, habits_handler, unknown_handler,
    voice_handler, voice_callback_handler, text_edit_handler
)
from .services.todoist_service import TodoistService
from .services.memory_service import MemoryService
from .utils.logger import setup_logging

# Load environment variables
load_dotenv()

# Setup logging
setup_logging()
logger = logging.getLogger(__name__)

# Conversation states
CHOOSING, TYPING_REASON = range(2)

class LifeOSBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ Life OS"""
    
    def __init__(self):
        self.config = load_config()
        self.todoist_service = TodoistService(self.config)
        self.memory_service = MemoryService()
        self.application = None
        
    async def post_init(self, app: Application) -> None:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        commands = [
            BotCommand("start", "üöÄ –ó–∞–ø—É—Å–∫ Life OS Bot"),
            BotCommand("help", "‚ùì –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
            BotCommand("capture", "üìù –ë—ã—Å—Ç—Ä—ã–π –∑–∞—Ö–≤–∞—Ç –∑–∞–¥–∞—á–∏ –∏–ª–∏ –∏–¥–µ–∏"),
            BotCommand("tasks", "üìã –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"),
            BotCommand("status", "üìä –°—Ç–∞—Ç—É—Å –∂–∏–∑–Ω–µ–Ω–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π"),
            BotCommand("review", "üîç –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ–±–∑–æ—Ä"),
            BotCommand("assess", "üìà –û—Ü–µ–Ω–∫–∞ –∂–∏–∑–Ω–∏"),
            BotCommand("schedule", "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"),
            BotCommand("mood", "üòä –ó–∞–ø–∏—Å–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"),
            BotCommand("habits", "‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–µ–∫"),
        ]
        await app.bot.set_my_commands(commands)
        logger.info("–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", start_handler))
        self.application.add_handler(CommandHandler("help", help_handler))
        self.application.add_handler(CommandHandler("capture", capture_handler))
        self.application.add_handler(CommandHandler("tasks", tasks_handler))
        self.application.add_handler(CommandHandler("status", status_handler))
        self.application.add_handler(CommandHandler("review", review_handler))
        self.application.add_handler(CommandHandler("assess", assess_handler))
        self.application.add_handler(CommandHandler("schedule", schedule_handler))
        self.application.add_handler(CommandHandler("mood", mood_handler))
        self.application.add_handler(CommandHandler("habits", habits_handler))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–Ω–æ–ø–∫–∏)
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(
            MessageHandler(filters.VOICE, voice_handler)
        )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.application.add_handler(
            MessageHandler(
                filters.TEXT & ~filters.COMMAND, 
                self.handle_text_message
            )
        )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        self.application.add_handler(
            MessageHandler(filters.COMMAND, unknown_handler)
        )
        
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    
    def _can_resolve_api(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ api.telegram.org —Ä–µ–∑–æ–ª–≤–∏—Ç—Å—è"""
        try:
            socket.getaddrinfo("api.telegram.org", 443)
            return True
        except Exception as e:
            logger.warning(f"DNS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return False
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            query = update.callback_query
            await query.answer()
            data = query.data
            
            if data.startswith("capture_task:"):
                content = data.split(":", 1)[1]
                await self.capture_task(content, update.effective_chat.id)
                await query.edit_message_text("‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞—Ö–≤–∞—á–µ–Ω–∞")
            elif data.startswith("capture_idea:"):
                content = data.split(":", 1)[1]
                await self.capture_idea(content, update.effective_chat.id)
                await query.edit_message_text("üí° –ò–¥–µ—è –∑–∞—Ö–≤–∞—á–µ–Ω–∞")
            elif data.startswith("voice_"):
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤—ã–µ callback —á–µ—Ä–µ–∑ voice_callback_handler
                await voice_callback_handler(update, context)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
    
    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        text = update.message.text
        chat_id = update.effective_chat.id
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            await text_edit_handler(update, context)
            return
        except Exception:
            pass  # –ï—Å–ª–∏ –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–µ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞—Ö–≤–∞—Ç–∏—Ç—å
        if len(text) < 100:
            keyboard = [
                [
                    InlineKeyboardButton("üìù –ó–∞—Ö–≤–∞—Ç–∏—Ç—å –∫–∞–∫ –∑–∞–¥–∞—á—É", 
                                       callback_data=f"capture_task:{text}"),
                    InlineKeyboardButton("üí° –ó–∞—Ö–≤–∞—Ç–∏—Ç—å –∫–∞–∫ –∏–¥–µ—é", 
                                       callback_data=f"capture_idea:{text}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "üí≠ –•–æ—Ç–∏—Ç–µ –∑–∞—Ö–≤–∞—Ç–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ?",
                reply_markup=reply_markup
            )
    
    async def capture_task(self, content: str, chat_id: int):
        """–ó–∞—Ö–≤–∞—Ç –∑–∞–¥–∞—á–∏"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
            await self.memory_service.save_task(content)
            
            # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω Todoist, —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —Ç–∞–º
            if self.config.todoist_api_token:
                await self.todoist_service.create_task(content)
                
            logger.info(f"–ó–∞–¥–∞—á–∞ –∑–∞—Ö–≤–∞—á–µ–Ω–∞: {content}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—Ö–≤–∞—Ç–µ –∑–∞–¥–∞—á–∏: {e}")
            raise
    
    async def capture_idea(self, content: str, chat_id: int):
        """–ó–∞—Ö–≤–∞—Ç –∏–¥–µ–∏"""
        try:
            await self.memory_service.save_idea(content)
            logger.info(f"–ò–¥–µ—è –∑–∞—Ö–≤–∞—á–µ–Ω–∞: {content}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—Ö–≤–∞—Ç–µ –∏–¥–µ–∏: {e}")
            raise
    
    async def update_life_area_score(self, area: str, score: int, chat_id: int):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏"""
        try:
            await self.memory_service.save_life_area_score(area, score)
            logger.info(f"–û—Ü–µ–Ω–∫–∞ –æ–±–ª–∞—Å—Ç–∏ '{area}' –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {score}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏: {e}")
            raise
    
    async def complete_task(self, task_id: str, chat_id: int):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏"""
        try:
            if self.config.todoist_api_token:
                await self.todoist_service.complete_task(task_id)
            await self.memory_service.complete_task(task_id)
            logger.info(f"–ó–∞–¥–∞—á–∞ {task_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
            raise
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π, —Å —Ä–µ—Ç—Ä–∞—è–º–∏ –ø—Ä–∏ —Å–µ—Ç–µ–≤—ã—Ö —Å–±–æ—è—Ö)"""
        backoff_seconds = 5
        max_backoff = 300
        while True:
            try:
                if not self._can_resolve_api():
                    logger.warning(f"api.telegram.org –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {backoff_seconds} —Å–µ–∫")
                    time.sleep(backoff_seconds)
                    backoff_seconds = min(backoff_seconds * 2, max_backoff)
                    continue
                
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                self.application = Application.builder().token(self.config.telegram_token).build()
                
                # post_init –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥
                self.application.post_init = self.post_init
                
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
                self.setup_handlers()
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ (–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤)
                logger.info("ü§ñ Life OS Bot –∑–∞–ø—É—â–µ–Ω...")
                self.application.run_polling(allowed_updates=Update.ALL_TYPES)
                
                # –ï—Å–ª–∏ run_polling –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º), –≤—ã—Ö–æ–¥–∏–º
                logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                break
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
                logger.info(f"–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ {backoff_seconds} —Å–µ–∫...")
                time.sleep(backoff_seconds)
                backoff_seconds = min(backoff_seconds * 2, max_backoff)
                continue


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è)"""
    bot = LifeOSBot()
    bot.start() 